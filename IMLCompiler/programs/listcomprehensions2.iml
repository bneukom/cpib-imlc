program listSum()
global
fun isPrime(in copy p:int) returns var b:bool
local
	var c:int
do
	c init := 2;
	
	if p > 1 do
		b init := true;
		while c < p do
			if p mod c == 0 do
				b := false
			else
				skip
			endif;
			c := c + 1
		endwhile
	else
		b init := false
	endif
endfun;
fun sum(in copy const l:[int]) returns var r:int
local 
var x:int
do
	if length l == 0 do
		r init := 0
	else
		r init := head l + sum(tail l)
	endif
endfun;

// reverse 2
fun reverse(in copy l:[int], in copy acc:[int]) returns var r:[int]
do
	if length l == 0 do
		r init := acc
	else
		r init := reverse(tail l, head l :: acc)
	endif
endfun;
var list:[int];
const limit:int
do
	debugin limit init;
	list init := { x | x from 0 to limit when isPrime(x) };
	debugout list;
	debugout sum(list);
	debugout reverse(list, []) :: [[]]
endprogram
