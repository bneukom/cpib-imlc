program aacodegentest() 
global 
fun isPrime(in copy p:int) returns var b:bool
global
local
	var c:int
do
	c init := 2;
	
	if p > 1 do
		b init := true;
		while c < p do
			if p mod c == 0 do
				b := false
			else
				skip
			endif;
			c := c + 1
		endwhile
	else
		b init := false
	endif
endfun;

fun sum(in copy l:[int]) returns var r:int
do
	if length l == 0 do
		r init := 0
	else
		r init := head l + sum(tail l)
	endif
endfun;

var l:[int];
var sum:int
do 
 /*	
 l init := { x | x from 990 + 10 to 0 when isPrime(x)  };
 sum init := sum(l);
 debugout l;
 debugout sum;
 */
 l init := { x | x from 0 to 100 when isPrime(x) };
 debugout l;
 debugout sum(l);
 debugout length l * length { x | x from 0 to 10 when true }
endprogram